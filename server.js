const express = require('express');
const sqlite3 = require('sqlite3').verbose();
// T·∫°o short ID thay v√¨ UUID d√†i
function generateShortId() {
  const chars = 'ABCDEFGHJKMNPQRSTUVWXYZabcdefghjkmnpqrstuvwxyz23456789';
  let result = '';
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// T·∫°o custom path t·ª´ t√™n link
function createFriendlyPath(name) {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '') // Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    .replace(/\s+/g, '-') // Thay space b·∫±ng d·∫•u g·∫°ch
    .replace(/-+/g, '-') // Lo·∫°i b·ªè d·∫•u g·∫°ch li√™n ti·∫øp
    .slice(0, 20); // Gi·ªõi h·∫°n ƒë·ªô d√†i
}
const cors = require('cors');
const axios = require('axios');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Kh·ªüi t·∫°o database
const db = new sqlite3.Database('tracking.db');

// Ch·∫°y migration
migrateDatabase();

// T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
db.run(`
  CREATE TABLE IF NOT EXISTS tracking_links (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    link_id TEXT UNIQUE,
    short_path TEXT UNIQUE,
    name TEXT,
    original_url TEXT,
    custom_domain TEXT,
    preview_enabled BOOLEAN DEFAULT 1,
    password TEXT,
    expires_at DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )
`);

db.run(`
  CREATE TABLE IF NOT EXISTS visits (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    link_id TEXT,
    ip_address TEXT,
    user_agent TEXT,
    latitude REAL,
    longitude REAL,
    country TEXT,
    city TEXT,
    region TEXT,
    timezone TEXT,
    visited_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (link_id) REFERENCES tracking_links (link_id)
  )
`);

// Migration function ƒë·ªÉ c·∫≠p nh·∫≠t database schema
function migrateDatabase() {
  // Checking database schema silently
  
  // T·∫°o b·∫£ng migration ƒë·ªÉ track c√°c migration ƒë√£ ch·∫°y
  db.run(`CREATE TABLE IF NOT EXISTS migrations (
    id INTEGER PRIMARY KEY,
    migration_name TEXT UNIQUE,
    executed_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);
  
  // Ki·ªÉm tra xem migration ƒë√£ ch·∫°y ch∆∞a
  db.get("SELECT * FROM migrations WHERE migration_name = 'add_columns_v1'", (err, migration) => {
    if (err) {
      console.error('Error checking migration:', err);
      return;
    }
    
    if (migration) {
      // Migration already completed
      return;
    }
    
    // Ch·∫°y migration an to√†n
    // Running database migration silently
    
    // Function ƒë·ªÉ th√™m c·ªôt an to√†n
    const addColumnSafely = (columnName, columnDef, callback) => {
      db.get(`PRAGMA table_info(tracking_links)`, (err, result) => {
        if (err) {
          console.error(`Error checking column ${columnName}:`, err);
          return callback && callback();
        }
        
        // Ki·ªÉm tra xem c·ªôt ƒë√£ t·ªìn t·∫°i ch∆∞a
        db.all(`PRAGMA table_info(tracking_links)`, (err, columns) => {
          if (err) return callback && callback();
          
          const columnExists = columns.some(col => col.name === columnName);
          
          if (!columnExists) {
            console.log(`‚ûï Adding ${columnName} column...`);
            db.run(`ALTER TABLE tracking_links ADD COLUMN ${columnName} ${columnDef}`, (err) => {
              if (err && !err.message.includes('duplicate column name')) {
                console.error(`Error adding ${columnName}:`, err);
              }
              callback && callback();
            });
          } else {
            console.log(`‚úÖ Column ${columnName} already exists`);
            callback && callback();
          }
        });
      });
    };
    
    // Th√™m t·ª´ng c·ªôt m·ªôt c√°ch an to√†n
    addColumnSafely('short_path', 'TEXT', () => {
      addColumnSafely('custom_domain', 'TEXT', () => {
        addColumnSafely('preview_enabled', 'BOOLEAN DEFAULT 1', () => {
          addColumnSafely('password', 'TEXT', () => {
            addColumnSafely('expires_at', 'DATETIME', () => {
              // ƒê√°nh d·∫•u migration ƒë√£ ho√†n th√†nh
              db.run("INSERT OR IGNORE INTO migrations (migration_name) VALUES ('add_columns_v1')", (err) => {
                if (!err) {
                  console.log('‚úÖ Migration completed successfully');
                  migrateExistingLinks();
                }
              });
            });
          });
        });
      });
    });
  });
}

function migrateExistingLinks() {
  console.log('üîÑ Migrating existing links...');
  
  // C·∫≠p nh·∫≠t c√°c link c≈© ƒë·ªÉ c√≥ short_path
  db.all("SELECT * FROM tracking_links WHERE short_path IS NULL", (err, links) => {
    if (err) {
      console.error('Error fetching links for migration:', err);
      return;
    }
    
    links.forEach(link => {
      const shortPath = createFriendlyPath(link.name) + '-' + generateShortId().slice(0, 3);
      
      db.run(
        "UPDATE tracking_links SET short_path = ?, preview_enabled = 1 WHERE id = ?",
        [shortPath, link.id],
        (err) => {
          if (err) {
            console.error(`Error migrating link ${link.id}:`, err);
          } else {
            console.log(`‚úÖ Migrated link: ${link.name} -> /${shortPath}`);
          }
        }
      );
    });
  });
}

// H√†m l·∫•y th√¥ng tin IP v·ªõi fallback
async function getIPInfo(ip) {
  try {
    // Th·ª≠ ipapi.co tr∆∞·ªõc
    const response = await axios.get(`https://ipapi.co/${ip}/json/`, {
      timeout: 5000
    });
    if (response.data && !response.data.error) {
      return response.data;
    }
  } catch (error) {
    console.log('ipapi.co failed, trying backup service...');
  }
  
  try {
    // Fallback sang ip-api.com (free, kh√¥ng c·∫ßn key)
    const response = await axios.get(`http://ip-api.com/json/${ip}`, {
      timeout: 5000
    });
    if (response.data && response.data.status === 'success') {
      return {
        latitude: response.data.lat,
        longitude: response.data.lon,
        country_name: response.data.country,
        city: response.data.city,
        region: response.data.regionName,
        timezone: response.data.timezone
      };
    }
  } catch (error) {
    console.log('ip-api.com also failed');
  }
  
  // N·∫øu t·∫•t c·∫£ ƒë·ªÅu fail, tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
  return {
    latitude: null,
    longitude: null,
    country_name: 'Unknown',
    city: 'Unknown',
    region: 'Unknown',
    timezone: 'Unknown'
  };
}

// Routes
// Trang ch·ªß - Dashboard
app.get('/', (req, res) => {
  db.all(`
    SELECT tl.*, COUNT(v.id) as visit_count 
    FROM tracking_links tl 
    LEFT JOIN visits v ON tl.link_id = v.link_id 
    GROUP BY tl.id 
    ORDER BY tl.created_at DESC
  `, (err, links) => {
    if (err) {
      console.error(err);
      return res.status(500).send('Database error');
    }
    
    // T·∫°o tracking URL cho m·ªói link
    links.forEach(link => {
      link.tracking_url = `${req.protocol}://${req.get('host')}/${link.short_path}`;
      link.is_expired = link.expires_at && new Date() > new Date(link.expires_at);
    });
    
    res.render('dashboard', { links, req });
  });
});

// API t·∫°o link m·ªõi v·ªõi options n√¢ng cao
app.post('/api/create-link', (req, res) => {
  const { name, originalUrl, customPath, customDomain, enablePreview, password, expiresIn } = req.body;
  const linkId = generateShortId();
  
  // T·∫°o friendly path
  let shortPath = customPath || createFriendlyPath(name) + '-' + generateShortId().slice(0, 3);
  
  // X·ª≠ l√Ω domain
  const domain = customDomain || req.get('host');
  
  // X·ª≠ l√Ω expiry
  let expiresAt = null;
  if (expiresIn && expiresIn > 0) {
    expiresAt = new Date(Date.now() + expiresIn * 24 * 60 * 60 * 1000).toISOString();
  }
    db.run(
    `INSERT INTO tracking_links 
     (link_id, short_path, name, original_url, custom_domain, preview_enabled, password, expires_at) 
     VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
    [linkId, shortPath, name, originalUrl, domain, 0, password || null, expiresAt],
    function(err) {
      if (err) {
        if (err.message.includes('UNIQUE')) {
          // Th·ª≠ l·∫°i v·ªõi path kh√°c
          shortPath = createFriendlyPath(name) + '-' + generateShortId();
          db.run(
            `INSERT INTO tracking_links 
             (link_id, short_path, name, original_url, custom_domain, preview_enabled, password, expires_at) 
             VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
            [linkId, shortPath, name, originalUrl, domain, 0, password || null, expiresAt],
            function(err2) {
              if (err2) {
                console.error(err2);
                return res.status(500).json({ error: 'Database error' });
              }
              sendResponse();
            }
          );
        } else {
          console.error(err);
          return res.status(500).json({ error: 'Database error' });
        }
      } else {
        sendResponse();
      }
      
      function sendResponse() {
        const trackingUrl = `${req.protocol}://${domain}/${shortPath}`;
        const adminUrl = `${req.protocol}://${req.get('host')}/admin/${linkId}`;
        
        res.json({
          success: true,
          linkId,
          shortPath,
          trackingUrl,
          adminUrl,
          originalUrl,
          expiresAt
        });
      }
    }
  );
});

// Route tracking ng·∫Øn g·ªçn v√† uy t√≠n - /:shortPath
app.get('/:shortPath', async (req, res) => {
  const shortPath = req.params.shortPath;
    // B·ªè qua c√°c route system
  if (['api', 'admin', 'track', 'details', 'favicon.ico', 'robots.txt'].includes(shortPath)) {
    return res.status(404).render('404');
  }
  
  // L·∫•y th√¥ng tin link
  db.get('SELECT * FROM tracking_links WHERE short_path = ?', [shortPath], async (err, link) => {
    if (err || !link) {
      return res.status(404).render('404', { shortPath });
    }
    
    // Ki·ªÉm tra expired
    if (link.expires_at && new Date() > new Date(link.expires_at)) {
      return res.status(410).render('expired', { link });
    }
    
    // Ki·ªÉm tra password
    if (link.password && req.query.pwd !== link.password) {
      return res.render('password', { link, shortPath });
    }
    
    await processTracking(req, res, link);
  });
});

// Route tracking c≈© ƒë·ªÉ backward compatibility
app.get('/track/:linkId', async (req, res) => {
  const linkId = req.params.linkId;
  
  db.get('SELECT * FROM tracking_links WHERE link_id = ?', [linkId], async (err, link) => {
    if (err || !link) {
      return res.status(404).send('Link not found');
    }
    
    await processTracking(req, res, link);
  });
});

// H√†m x·ª≠ l√Ω tracking chung
async function processTracking(req, res, link) {
    // L·∫•y IP v√† th√¥ng tin ng∆∞·ªùi d√πng v·ªõi x·ª≠ l√Ω t·ªët h∆°n
    let clientIP = req.headers['x-forwarded-for'] || 
                   req.headers['x-real-ip'] ||
                   req.connection.remoteAddress || 
                   req.socket.remoteAddress ||
                   (req.connection.socket ? req.connection.socket.remoteAddress : null);
    
    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p c√≥ nhi·ªÅu IP trong x-forwarded-for
    if (clientIP && clientIP.includes(',')) {
      clientIP = clientIP.split(',')[0].trim();
    }
    
    // Lo·∫°i b·ªè IPv6 prefix n·∫øu c√≥
    if (clientIP && clientIP.substr(0, 7) === '::ffff:') {
      clientIP = clientIP.substr(7);
    }
      const userAgent = req.headers['user-agent'];
    
    // Thu th·∫≠p th√¥ng tin √¢m th·∫ßm (kh√¥ng log ra console)    // L·∫•y th√¥ng tin v·ªã tr√≠ t·ª´ IP
    let ipInfo;
    if (clientIP === '::1' || clientIP === '127.0.0.1' || clientIP.startsWith('192.168.') || clientIP.startsWith('10.')) {
      // S·ª≠ d·ª•ng IP demo ƒë·ªÉ test (IP c·ªßa Google)
      ipInfo = await getIPInfo('8.8.8.8');
      if (ipInfo) {
        ipInfo.isDemo = true;
        ipInfo.realIP = clientIP;
      }
    } else {
      ipInfo = await getIPInfo(clientIP);
    }
    
    // L∆∞u th√¥ng tin visit
    const visitData = {
      link_id: link.link_id,
      ip_address: clientIP,
      user_agent: userAgent,
      latitude: ipInfo ? ipInfo.latitude : null,
      longitude: ipInfo ? ipInfo.longitude : null,
      country: ipInfo ? ipInfo.country_name : null,
      city: ipInfo ? ipInfo.city : null,
      region: ipInfo ? ipInfo.region : null,
      timezone: ipInfo ? ipInfo.timezone : null
    };
    
    db.run(`
      INSERT INTO visits (link_id, ip_address, user_agent, latitude, longitude, country, city, region, timezone)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)    `, Object.values(visitData), (err) => {
      // √Çm th·∫ßm b·ªè qua l·ªói
    });
    
    // Redirect tr·ª±c ti·∫øp kh√¥ng hi·ªÉn th·ªã trang tracking ƒë·ªÉ tr√°nh b·ªã ph√°t hi·ªán
    res.redirect(link.original_url);
}

// API l·∫•y v·ªã tr√≠ t·ª´ GPS (JavaScript geolocation)
app.post('/api/update-location', (req, res) => {
  const { linkId, latitude, longitude } = req.body;
  
  // C·∫≠p nh·∫≠t v·ªã tr√≠ GPS n·∫øu c√≥
  db.run(`
    UPDATE visits 
    SET latitude = ?, longitude = ? 
    WHERE link_id = ? AND visited_at = (
      SELECT MAX(visited_at) FROM visits WHERE link_id = ?
    )
  `, [latitude, longitude, linkId, linkId], (err) => {
    if (err) {
      console.error('Error updating location:', err);
      return res.status(500).json({ error: 'Database error' });
    }
    res.json({ success: true });
  });
});

// API l·∫•y d·ªØ li·ªáu visits cho m·ªôt link
app.get('/api/visits/:linkId', (req, res) => {
  const linkId = req.params.linkId;
  
  db.all('SELECT * FROM visits WHERE link_id = ? ORDER BY visited_at DESC', [linkId], (err, visits) => {
    if (err) {
      console.error(err);
      return res.status(500).json({ error: 'Database error' });
    }
    res.json(visits);
  });
});

// Trang xem chi ti·∫øt m·ªôt link
app.get('/details/:linkId', (req, res) => {
  const linkId = req.params.linkId;
  
  db.get('SELECT * FROM tracking_links WHERE link_id = ?', [linkId], (err, link) => {
    if (err || !link) {
      return res.status(404).send('Link not found');
    }
    
    db.all('SELECT * FROM visits WHERE link_id = ? ORDER BY visited_at DESC', [linkId], (err, visits) => {
      if (err) {
        console.error(err);
        return res.status(500).send('Database error');
      }
      
      // Truy·ªÅn req object v√†o template
      res.render('details', { link, visits, req });
    });
  });
});

// API ƒë·ªÉ ki·ªÉm tra IP hi·ªán t·∫°i
app.get('/api/check-ip', async (req, res) => {
  let clientIP = req.headers['x-forwarded-for'] || 
                 req.headers['x-real-ip'] ||
                 req.connection.remoteAddress || 
                 req.socket.remoteAddress ||
                 (req.connection.socket ? req.connection.socket.remoteAddress : null);
  
  if (clientIP && clientIP.includes(',')) {
    clientIP = clientIP.split(',')[0].trim();
  }
  
  if (clientIP && clientIP.substr(0, 7) === '::ffff:') {
    clientIP = clientIP.substr(7);
  }
  
  // L·∫•y IP c√¥ng khai th·∫≠t t·ª´ service b√™n ngo√†i
  let publicIP = clientIP;
  try {
    const response = await axios.get('https://api.ipify.org?format=json', { timeout: 3000 });
    publicIP = response.data.ip;
  } catch (error) {
    console.log('Could not get public IP:', error.message);
  }
  
  const ipInfo = await getIPInfo(publicIP);
  
  res.json({
    detectedIP: clientIP,
    publicIP: publicIP,
    isLocalhost: clientIP === '::1' || clientIP === '127.0.0.1' || clientIP.startsWith('192.168.') || clientIP.startsWith('10.'),
    locationInfo: ipInfo,
    headers: {
      'x-forwarded-for': req.headers['x-forwarded-for'],
      'x-real-ip': req.headers['x-real-ip'],
      'user-agent': req.headers['user-agent']
    }
  });
});

// API test v·ªõi IP th·∫≠t
app.post('/api/test-real-ip', async (req, res) => {
  try {
    const response = await axios.get('https://api.ipify.org?format=json', { timeout: 3000 });
    const realIP = response.data.ip;
    const ipInfo = await getIPInfo(realIP);
    
    res.json({
      success: true,
      realIP: realIP,
      locationInfo: ipInfo
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

migrateDatabase();

app.listen(PORT, () => {
  console.log(`Server started on port ${PORT}`);
});
